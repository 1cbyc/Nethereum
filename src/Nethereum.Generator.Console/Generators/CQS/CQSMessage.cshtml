@using Nethereum.ABI.Model
@using Nethereum.Generator.Console.Generators.CQS
@model Nethereum.Generator.Console.Generators.CQS.CQSMessageModel
using System;
using System.Threading.Tasks;
using System.Numerics;
using Nethereum.Hex.HexTypes;
using Nethereum.ABI.FunctionEncoding.Attributes;
using Nethereum.Contracts;
using Nethereum.Web3;
using Nethereum.Contracts.CQS;

namespace @Model.Namespace
{
@foreach (var function in @Model.Contract.Functions) //Function Messages
{
    if (function.Name == @Model.FunctionName)
    {
        if (function.OutputParameters != null && function.OutputParameters.Length > 1)
        {
    <text>
    [Function("@function.Name", typeof(@(Raw(Model.Utils.CapitaliseFirstChar(function.Name)))ResponseDTO))]
    public class @Model.GetFunctionMessageName():ContractMessage
    {
    </text>
        }

        if (function.OutputParameters != null && function.OutputParameters.Length == 1)
        {
    <text>
    [Function("@function.Name", "@Raw(Model.GetSingleAbiReturnType(function))")]
    public class @(Model.Utils.CapitaliseFirstCharAndRemoveUnderscorePrefix(function.Name))Function:ContractMessage
    {
    </text>
        }

        if (function.OutputParameters != null && function.OutputParameters.Length == 0)
        {
    <text>
    [Function("@function.Name")]
    public class @(Model.Utils.CapitaliseFirstCharAndRemoveUnderscorePrefix(function.Name))Function:ContractMessage
    {
    </text>
        }
        @foreach (var parameter in function.InputParameters)
        {   
        <text>
        [Parameter("@parameter.Type", "@parameter.Name", @parameter.Order)]
        public @(Raw(Model.GetTypeMap(parameter.Type, true))) @Model.Utils.CapitaliseFirstCharAndRemoveUnderscorePrefix(@Model.GetParameterName(parameter.Name, parameter.Order)) {get; set;}
        </text>
        }
    <text>   
    }
    </text>
    }
}
@foreach (var function in @Model.Contract.Functions) //Function DTOS >1 parameter output
{
    if (function.Name == @Model.FunctionName)
    {
        if (function.OutputParameters != null && function.OutputParameters.Length > 1)
        {
     <text>
         
    [FunctionOutput]
    public class @(Model.Utils.CapitaliseFirstCharAndRemoveUnderscorePrefix(function.Name))ResponseDTO
    {
        @foreach (var parameter in function.OutputParameters)
        {
        <text>
        [Parameter("@parameter.Type", "@parameter.Name", @parameter.Order)]
        public @(Raw(Model.GetTypeMap(parameter.Type, true))) @Model.Utils.CapitaliseFirstCharAndRemoveUnderscorePrefix(Model.GetParameterName(parameter.Name, parameter.Order)) {get; set;}
        </text>
        }

    }
    </text>
        }
    }
}

}
