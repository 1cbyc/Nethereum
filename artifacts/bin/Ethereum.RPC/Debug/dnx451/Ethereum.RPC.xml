<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ethereum.RPC</name>
    </assembly>
    <members>
        <member name="T:Ethereum.RPC.EthAccounts">
            <Summary>
             eth_accounts
             
             Returns a list of addresses owned by client.
             
             Parameters
             
             none
             
             Returns
             
             Array of DATA, 20 Bytes - addresses owned by the client.
             
             Example
             
              Request
             curl -X POST --data '{"jsonrpc":"2.0","method":"eth_accounts","params":[],"id":1}'
             
              Result
             {
               "id":1,
               "jsonrpc": "2.0",
               "result": ["0x407d73d8a49eeb85d32cf465507dd71d507100c1"]
             }    
            </Summary>
        </member>
        <member name="T:Ethereum.RPC.EthBlockNumber">
            <Summary>
             eth_blockNumber
             
             Returns the number of most recent block.
             
             Parameters
             
             none
             
             Returns
             
             QUANTITY - integer of the current block number the client is on.
             
             Example
             
              Request
             curl -X POST --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":83}'
             
              Result
             {
               "id":83,
               "jsonrpc": "2.0",
               "result": "0x4b7" // 1207
             }    
            </Summary>
        </member>
        <member name="T:Ethereum.RPC.EthCoinBase">
            <Summary>
             eth_coinbase
             
             Returns the client coinbase address.
             
             Parameters
             
             none
             
             Returns
             
             DATA, 20 bytes - the current coinbase address.
             
             Example
             
              Request
             curl -X POST --data '{"jsonrpc":"2.0","method":"eth_coinbase","params":[],"id":64}'
             
              Result
             {
               "id":64,
               "jsonrpc": "2.0",
               "result": "0x407d73d8a49eeb85d32cf465507dd71d507100c1"
             }    
            </Summary>
        </member>
        <member name="T:Ethereum.RPC.EthCompileSolidity">
             <summary>
            
            Returns compiled solidity code.
            
            Parameters
            1. String - The source code.
            params: [
               "contract test { function multiply(uint a) returns(uint d) {   return a * 7;   } }",
            ]
            
            Returns
            DATA - The compiled source code.
            
            Example
             Request
            curl -X POST --data '{"jsonrpc":"2.0","method":"eth_compileSolidity","params":["contract test { function multiply(uint a) returns(uint d) {   return a * 7;   } }"],"id":1}'
            
             Result
            {
              "id":1,
              "jsonrpc": "2.0",
              "result": {
                  "code": "0x605880600c6000396000f3006000357c010000000000000000000000000000000000000000000000000000000090048063c6888fa114602e57005b603d6004803590602001506047565b8060005260206000f35b60006007820290506053565b91905056",
                  "info": {
                    "source": "contract test {\n   function multiply(uint a) constant returns(uint d) {\n       return a * 7;\n   }\n}\n",
                    "language": "Solidity",
                    "languageVersion": "0",
                    "compilerVersion": "0.9.19",
                    "abiDefinition": [
                      {
                        "constant": true,
                        "inputs": [
                          {
                            "name": "a",
                            "type": "uint256"
                          }
                        ],
                        "name": "multiply",
                        "outputs": [
                          {
                            "name": "d",
                            "type": "uint256"
                          }
                        ],
                        "type": "function"
                      }
                    ],
                    "userDoc": {
                      "methods": {}
                    },
                    "developerDoc": {
                      "methods": {}
                    }
                  }
            
            }
             </summary>
        </member>
        <member name="T:Ethereum.RPC.EthGasPrice">
            <Summary>
             eth_gasPrice
             
             Returns the current price per gas in wei.
             
             Parameters
             
             none
             
             Returns
             
             QUANTITY - integer of the current gas price in wei.
             
             Example
             
              Request
             curl -X POST --data '{"jsonrpc":"2.0","method":"eth_gasPrice","params":[],"id":73}'
             
              Result
             {
               "id":73,
               "jsonrpc": "2.0",
               "result": "0x09184e72a000" // 10000000000000
             }    
            </Summary>
        </member>
        <member name="T:Ethereum.RPC.EthGetCompilers">
            <Summary>
             eth_getCompilers
             
             Returns a list of available compilers in the client.
             
             Parameters
             
             none
             
             Returns
             
             Array - Array of available compilers.
             
             Example
             
              Request
             curl -X POST --data '{"jsonrpc":"2.0","method":"eth_getCompilers","params":[],"id":1}'
             
              Result
             {
               "id":1,
               "jsonrpc": "2.0",
               "result": ["solidity", "lll", "serpent"]
             }    
            </Summary>
        </member>
        <member name="T:Ethereum.RPC.EthHashrate">
            <Summary>
             eth_hashrate
             
             Returns the number of hashes per second that the node is mining with.
             
             Parameters
             
             none
             
             Returns
             
             QUANTITY - number of hashes per second.
             
             Example
             
              Request
             curl -X POST --data '{"jsonrpc":"2.0","method":"eth_hashrate","params":[],"id":71}'
             
              Result
             {
               "id":71,
               "jsonrpc": "2.0",
               "result": "0x38a"
             }    
            </Summary>
        </member>
        <member name="T:Ethereum.RPC.EthMining">
            <Summary>
             eth_mining
             
             Returns true if client is actively mining new blocks.
             
             Parameters
             
             none
             
             Returns
             
             Boolean - returns true of the client is mining, otherwise false.
             
             Example
             
              Request
             curl -X POST --data '{"jsonrpc":"2.0","method":"eth_mining","params":[],"id":71}'
             
              Result
             {
               "id":71,
               "jsonrpc": "2.0",
               "result": true
             }    
            </Summary>
        </member>
        <member name="T:Ethereum.RPC.EthNewBlockFilter">
            <Summary>
             eth_newBlockFilter
             
             Creates a filter in the node, to notify when a new block arrives. To check if the state has changed, call eth_getFilterChanges.
             
             Parameters
             
             None
             
             Returns
             
             QUANTITY - A filter id.
             
             Example
             
              Request
             curl -X POST --data '{"jsonrpc":"2.0","method":"eth_newBlockFilter","params":[],"id":73}'
             
              Result
             {
               "id":1,
               "jsonrpc":  "2.0",
               "result": "0x1" // 1
             }    
            </Summary>
        </member>
        <member name="T:Ethereum.RPC.EthNewPendingTransactionFilter">
            <Summary>
             eth_newPendingTransactionFilter
             
             Creates a filter in the node, to notify when new pending transactions arrive. To check if the state has changed, call eth_getFilterChanges.
             
             Parameters
             
             None
             
             Returns
             
             QUANTITY - A filter id.
             
             Example
             
              Request
             curl -X POST --data '{"jsonrpc":"2.0","method":"eth_newPendingTransactionFilter","params":[],"id":73}'
             
              Result
             {
               "id":1,
               "jsonrpc":  "2.0",
               "result": "0x1" // 1
             }    
            </Summary>
        </member>
        <member name="T:Ethereum.RPC.EthProtocolVersion">
            <Summary>
             eth_protocolVersion
             
             Returns the current ethereum protocol version.
             
             Parameters
             
             none
             
             Returns
             
             String - The current ethereum protocol version
             
             Example
             
              Request
             curl -X POST --data '{"jsonrpc":"2.0","method":"eth_protocolVersion","params":[],"id":67}'
             
              Result
             {
               "id":67,
               "jsonrpc": "2.0",
               "result": "54"
             }    
            </Summary>
        </member>
        <member name="T:Ethereum.RPC.SendTransaction.EthSendTransactionInput">
            <summary>
            Object - The transaction object
            </summary>
        </member>
        <member name="P:Ethereum.RPC.SendTransaction.EthSendTransactionInput.From">
            <summary>
             DATA, 20 Bytes - The address the transaction is send from.
            </summary>
        </member>
        <member name="P:Ethereum.RPC.SendTransaction.EthSendTransactionInput.To">
            <summary>
            DATA, 20 Bytes - (optional when creating new contract) The address the transaction is directed to.
            </summary>
        </member>
        <member name="P:Ethereum.RPC.SendTransaction.EthSendTransactionInput.Gas">
            <summary>
            QUANTITY - (optional, default: 90000) Integer of the gas provided for the transaction execution.It will return unused gas.
            </summary>
        </member>
        <member name="P:Ethereum.RPC.SendTransaction.EthSendTransactionInput.GasPrice">
            <summary>
            gasPrice: QUANTITY - (optional, default: To-Be-Determined) Integer of the gasPrice used for each paid gas
            </summary>
        </member>
        <member name="P:Ethereum.RPC.SendTransaction.EthSendTransactionInput.Value">
            <summary>
            value: QUANTITY - (optional) Integer of the value send with this transaction
            </summary>
        </member>
        <member name="P:Ethereum.RPC.SendTransaction.EthSendTransactionInput.Data">
            <summary>
            data: DATA - (optional) The compiled code of a contract
            </summary>
        </member>
        <member name="P:Ethereum.RPC.SendTransaction.EthSendTransactionInput.Nonce">
            <summary>
            nonce: QUANTITY - (optional) Integer of a nonce. This allows to overwrite your own pending transactions that use the same nonce.
            </summary>
        </member>
        <member name="T:Ethereum.RPC.EthSyncing">
            <Summary>
             eth_syncing
             
             Returns an object object with data about the sync status or FALSE.
             
             Parameters
             
             none
             
             Returns
             
             Object|Boolean, An object with sync status data or FALSE, when not syncing:
             
             startingBlock: QUANTITY - The block at which the import started (will only be reset, after the sync reached his head)
             currentBlock: QUANTITY - The current block, same as eth_blockNumber
             highestBlock: QUANTITY - The estimated highest block
             Example
             
              Request
             curl -X POST --data '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}'
             
              Result
             {
               "id":1,
               "jsonrpc": "2.0",
               "result": {
                 startingBlock: '0x384',
                 currentBlock: '0x386',
                 highestBlock: '0x454'
               }
             }
              Or when not syncing
             {
               "id":1,
               "jsonrpc": "2.0",
               "result": false
             }    
            </Summary>
        </member>
        <member name="T:Ethereum.RPC.EthSyncingOutput">
            <summary>
            Object - The transaction object
            </summary>
        </member>
        <member name="P:Ethereum.RPC.EthSyncingOutput.Synching">
            <summary>
            Is it synching?
            </summary>
        </member>
        <member name="P:Ethereum.RPC.EthSyncingOutput.StartingBlockHex">
            <summary>
             StartingBlock: QUANTITY - The block at which the import started (will only be reset, after the sync reached his head)
            </summary>
        </member>
        <member name="P:Ethereum.RPC.EthSyncingOutput.CurrentBlockHex">
            <summary>
            CurrentBlock: QUANTITY - The current block, same as eth_blockNumber
            </summary>
        </member>
        <member name="P:Ethereum.RPC.EthSyncingOutput.HighestBlockHex">
            <summary>
            HighestBlock: QUANTITY - The estimated highest block
            </summary>
        </member>
        <member name="T:Ethereum.RPC.NetListening">
            <Summary>
             net_listening
             
             Returns true if client is actively listening for network connections.
             
             Parameters
             
             none
             
             Returns
             
             Boolean - true when listening, otherwise false.
             
             Example
             
              Request
             curl -X POST --data '{"jsonrpc":"2.0","method":"net_listening","params":[],"id":67}'
             
              Result
             {
               "id":67,
               "jsonrpc":"2.0",
               "result":true
             }    
            </Summary>
        </member>
        <member name="T:Ethereum.RPC.NetPeerCount">
            <Summary>
             net_peerCount
             
             Returns number of peers currenly connected to the client.
             
             Parameters
             
             none
             
             Returns
             
             QUANTITY - integer of the number of connected peers.
             
             Example
             
              Request
             curl -X POST --data '{"jsonrpc":"2.0","method":"net_peerCount","params":[],"id":74}'
             
              Result
             {
               "id":74,
               "jsonrpc": "2.0",
               "result": "0x2" // 2
             }    
            </Summary>
        </member>
        <member name="T:Ethereum.RPC.NetVersion">
            <Summary>
             net_version
             
             Returns the current network protocol version.
             
             Parameters
             
             none
             
             Returns
             
             String - The current network protocol version
             
             Example
             
              Request
             curl -X POST --data '{"jsonrpc":"2.0","method":"net_version","params":[],"id":67}'
             
              Result
             {
               "id":67,
               "jsonrpc": "2.0",
               "result": "59"
             }    
            </Summary>
        </member>
        <member name="T:Ethereum.RPC.ShhNewIdentity">
            <Summary>
             shh_newIdentity
             
             Creates new whisper identity in the client.
             
             Parameters
             
             none
             
             Returns
             
             DATA, 60 Bytes - the address of the new identiy.
             
             Example
             
              Request
             curl -X POST --data '{"jsonrpc":"2.0","method":"shh_newIdentity","params":[],"id":73}'
             
              Result
             {
               "id":1,
               "jsonrpc": "2.0",
               "result": "0xc931d93e97ab07fe42d923478ba2465f283f440fd6cabea4dd7a2c807108f651b7135d1d6ca9007d5b68aa497e4619ac10aa3b27726e1863c1fd9b570d99bbaf"
             }    
            </Summary>
        </member>
        <member name="T:Ethereum.RPC.ShhVersion">
            <Summary>
             shh_version
             
             Returns the current whisper protocol version.
             
             Parameters
             
             none
             
             Returns
             
             String - The current whisper protocol version
             
             Example
             
              Request
             curl -X POST --data '{"jsonrpc":"2.0","method":"shh_version","params":[],"id":67}'
             
              Result
             {
               "id":67,
               "jsonrpc": "2.0",
               "result": "2"
             }    
            </Summary>
        </member>
        <member name="T:Ethereum.RPC.Web3ClientVersion">
            <Summary>
             web3_clientVersion
             Returns the current client version.
            
             Parameters
             none
            
             Returns
             String - The current client version
            
              Curl Example
              Request
              curl -X POST --data '{"jsonrpc":"2.0","method":"web3_clientVersion","params":[],"id":67}'
            
              Result
              {
               "id":67,
               "jsonrpc":"2.0",
               "result": "Mist/v0.9.3/darwin/go1.4.1"
              }
            </Summary>
        </member>
        <member name="T:Ethereum.RPC.Web3Sha3">
             <summary>
             web3_sha3
             Returns Keccak-256 (not the standardized SHA3-256) of the given data.
            
             Parameters
             1. String - the data to convert into a SHA3 hash
             params: [
              '0x68656c6c6f20776f726c64'
             ]
            
             Returns
             DATA - The SHA3 result of the given string.
            
             Example
             Request
             curl -X POST --data '{"jsonrpc":"2.0","method":"web3_sha3","params":["0x68656c6c6f20776f726c64"],"id":64}'
            
             Result
             {
              "id":64,
              "jsonrpc": "2.0",
              "result": "0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad"
             }
             </summary>
        </member>
    </members>
</doc>
